#include <stdio.h>
#include <string.h>
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}
int main()
 {
    char input[] = "help";
    char plain[200], cipher[200], decrypted[200];
    int key[2][2] = {{3,3}, {2, 5}};
    int invKey[2][2];
    int i, j = 0, len;
    for (i = 0; input[i] != '\0'; i++) {
        if (input[i] >= 'a' && input[i] <= 'z') {
            plain[j++] = input[i];
        }
    }   
    if (j % 2 != 0) {
        plain[j++] = 'x';
    }
    plain[j] = '\0';
    len = j;
    int det = key[0][0] * key[1][1] - key[0][1] * key[1][0];
    det = (det % 26 + 26) % 26;
    int detInv = modInverse(det, 26);

    if (detInv == -1) {
        printf("Key matrix is not invertible under mod 26.\n");
        return 1;
    }
    invKey[0][0] = key[1][1];
    invKey[0][1] = -key[0][1];
    invKey[1][0] = -key[1][0];
    invKey[1][1] = key[0][0];

    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++) {
            invKey[i][j] = (invKey[i][j] * detInv) % 26;
            if (invKey[i][j] < 0)
                invKey[i][j] += 26;
        }
    }
    for (i = 0; i < len; i += 2) {
        int a = plain[i] - 'a';
        int b = plain[i + 1] - 'a';
        cipher[i] = ((key[0][0] * a + key[1][0] * b) % 26) + 'a';
        cipher[i + 1] = ((key[0][1] * a + key[1][1] * b) % 26) + 'a';
    }
    cipher[len] = '\0';
    printf("Cipher Text: %s\n", cipher);
    for (i = 0; i < len; i += 2) {
        int a = cipher[i] - 'a';
        int b = cipher[i + 1] - 'a';
        decrypted[i] = ((invKey[0][0] * a + invKey[1][0] * b)+26)%26+'a';
        decrypted[i+1] = ((invKey[0][1] * a + invKey[1][1] * b)+26)%26+'a';
    }
    decrypted[len] = '\0';
    printf("Decrypted Text: %s\n", decrypted);
    return 0;
}
